# Module: quartic_ground_solver_hpc
# Author: Yi Deng <dengyi@stu.pku.edu.cn>

import numpy as np
from decimal import Decimal, getcontext
import math
import json
import time
from src.quartic_excited_solver import quartic_excited_solver, save_results

def seq_quartic_excited_solver(c, E0s, truncations, precision, tol, max_iter=100, n_excited=5):
    """
    Function to solve the Riccati equation for the excited states of the quartic potential in sequence.
    
    Parameters:
    c (Decimal): The parameter of the transformation.
    E0s (list): The energy guesses for the first n excited states.
    truncations (int): The maximum truncation order for the expansion.
    precision (int): The precision for the high precision arithmetic.
    tol (Decimal): The tolerance for energy eigenvalue convergence.
    max_iter (int): The maximum number of iterations for the Newton method.
    n_excited (int): The number of excited states to solve.
    
    Returns:
    save data in json files.
    """
    getcontext().prec = precision
    
    c = Decimal(str(c))
    E0s = [Decimal(str(E0)) for E0 in E0s]
    tol = Decimal(str(tol))
    # update energy guess in each truncation order
    for truncation_order in range(1050, truncations+1, 10):
        start_time = time.time()
        Es, expansions = quartic_excited_solver(c, E0s, truncation_order, precision, tol, max_iter, n_excited)
        end_time = time.time()
        with open("results/log.txt", "a") as log_file:
            log_file.write(f"Truncation order: {truncation_order}, Time taken: {end_time - start_time:.2f} seconds\n")
        print(f"Truncation order: {truncation_order}, Time taken: {end_time - start_time:.2f} seconds")
        # save data
        # filename includes n_excited, c, truncation_order, precision, tol
        filename = f"results/quartic_excited_{n_excited}_c_{c}_trunc_{truncation_order}_prec_{precision}_tol_{tol}.json"
        save_results(filename, Es, expansions)
        # update energy guesses
        E0s = Es
    return None

if __name__ == "__main__":
    c = 5
    E0s = np.array([
        Decimal("0.530181045242091449823523008346331772757604364264488966608122620847971781522172210563448149567335851755273122179291262790439904105146573506588418186912467894613123002354087723480070818744208641128452967878895444030894395131800774697845137598074450471467436792204721347448950606985732145475961677266914173516752878807556012851994426186012011092055154328686554569945772682920515558397029167743000461372003481556335119534060"),
        Decimal("1.89983651490069708439154709425628447888303273366367670499154870217614030011884968965574917382400012968036059032863063704709683760023657443638767305868910911906262244378614643106911545408488610693750910368544330645961725175169990553719393685337292333189698419079774767914666323911546061813489441451985801665327200494668462797363947186738570332677427968844004567012563161235446637074243741844062328661643833390577915225021"),
        Decimal("3.72784896899336919607829567359288374406890976837455043321844435322776820743680065215454488667922091426095497267252086302645818962310000282958881406012236852579885992551299754299445836016838161142887417198545587580309278808519859759937203316535068925766643797944877012421817538827452553658799284685421351780194489889414670025930544650421540958620933919395802935731600554521906927955685620984418735803889277112386956114396"),
        Decimal("5.82237275568908101042518664068546821827543608098722650083463545692581280529343481160793847392456359547004068987870898748251945663047568840818550649682965351758894786655735048328825333384423943657287949306058123908270719411668193793216194934466067478326452439252311423646905958131941694470958814519159058203614720473655675171246455577861795111243027630248199309077902298081562849365289769132754216625855272874997091509336"),
        Decimal("8.13091300942511296894747721519230676712229325225708227106056046779077658675499026878575102781104261841566247496741795157009615539639306777474716856877049968805386258054735135129326502157894229997092270082126697291687718743891167411205416699909241751519790389374617668997158273521461993479010374559583744508972158410985062776935513979855625777169156152133947806531847828382947314193633716851299559237580869467764766758594")
    ])
    truncations = 5000
    precision = 800
    tol = Decimal("1e-700")
    log_file = "results/log.txt"
    seq_quartic_excited_solver(c, E0s, truncations, precision, tol)
    